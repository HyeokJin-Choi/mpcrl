0) 준비 체크 (라즈베리파이)
# 64bit OS 권장 (arm64)
uname -m         # aarch64 라면 OK (armv7l이면 32bit → casadi/과학계열 패키지 설치가 더 까다로움)

# 시스템 업데이트
sudo apt update && sudo apt -y full-upgrade

# 시간/로케일(선택) – 한국 표준시
sudo timedatectl set-timezone Asia/Seoul


1) 필수 패키지 설치
# Python 3.11 + venv, 빌드 도구, BLAS 등
sudo apt install -y python3.11 python3.11-venv python3.11-dev \
    build-essential gfortran libopenblas-dev libatlas3-base \
    git pkg-config

# (선택) 장시간 학습 대비: tmux
sudo apt install -y tmux


2) 프로젝트 디렉터리 & 가상환경
mkdir -p ~/checkjin
cd ~/checkjin

python3.11 -m venv .venv311
source .venv311/bin/activate

python -m pip install --upgrade pip setuptools wheel



3) 레포 받기 (두 가지 방법 중 하나)
방법 A) 원본 레포 그대로 클론
cd ~/checkjin
git clone https://github.com/SamuelMallick/mpcrl-greenhouse.git
cd mpcrl-greenhouse


4) 파이썬 의존성 설치
# 가상환경 활성화되어 있어야 함
source ~/checkjin/.venv311/bin/activate
cd ~/checkjin/mpcrl-greenhouse

# 먼저 기본 업그레이드
pip install --upgrade pip setuptools wheel

# 보통 이렇게 한 번에 끝나지만,
# casadi에서 에러 나면 아래 '설치 트러블슈팅' 참고
pip install -r requirements.txt

pip install "casadi>=3.6,<3.7"


5) 네가 WSL에서 하던 “안전 옵션/치환” 그대로 적용
# ipopt.opt 생성
cd ~/checkjin/mpcrl-greenhouse
cat > ipopt.opt <<'EOF'
print_level 0
linear_solver mumps
hessian_approximation limited-memory
tol 1e-6
EOF

# 레포 내부에서 ipopt 옵션 블록 안전치환 (필요 시)
cp mpcs/learning.py mpcs/learning.py.bak
cp mpcs/sample_based.py mpcs/sample_based.py.bak
cp mpcs/nominal.py mpcs/nominal.py.bak

perl -0777 -i -pe 's/"ipopt":\s*\{.*?\}/"ipopt": {\n    \"print_level\": 0,\n    \"linear_solver\": \"mumps\",\n    \"hessian_approximation\": \"limited-memory\",\n\n    \"mu_strategy\": \"adaptive\",\n    \"tol\": 1e-5,\n    \"acceptable_tol\": 1e-2,\n    \"acceptable_iter\": 10,\n    \"max_iter\": 2000\n}/s' mpcs/learning.py mpcs/sample_based.py mpcs/nominal.py

sed -i -E 's/"print_time"[[:space:]]*:[[:space:]]*[0-9]+/"print_time": 0/g' mpcs/learning.py mpcs/sample_based.py mpcs/nominal.py

# greenhouse_agent.py 리턴 안전화 패치 (네가 쓰던 것)
sed -i -E 's/return None if stats\["success"\] else stats\["return_status"\]/return None if (stats is None or (isinstance(stats, dict) and stats.get("success", False))) else (stats.get("return_status","UpdateFailed") if isinstance(stats, dict) else stats)/' agents/greenhouse_agent.py

python -m py_compile agents/greenhouse_agent.py




10) WSL에서 쓰던 “재접속/확인” 명령 그대로
# 재접속 시
source ~/checkjin/.venv311/bin/activate
cd ~/checkjin/mpcrl-greenhouse

# 확인
which python
python -V
pip list




mpcrl의 초기화에서 numba를 안 쓰도록 패치 + RL테스트
source ~/checkjin/.venv311/bin/activate

python - <<'PY'
import sysconfig, os, re

site = sysconfig.get_paths()['purelib']
init = os.path.join(site, 'mpcrl', '__init__.py')

with open(init, 'r', encoding='utf-8') as f:
    src = f.read()

# lstd_dpg를 즉시 임포트하는 줄을 "지연 임포트" 함수로 바꿈
patched = re.sub(
    r'^\s*from\s+\.agents\.lstd_dpg\s+import\s+LstdDpgAgent\s*$',
    "# RPi armv7 workaround: lazy import to avoid numba at import time\n"
    "# from .agents.lstd_dpg import LstdDpgAgent\n"
    "def LstdDpgAgent(*args, **kwargs):\n"
    "    from .agents.lstd_dpg import LstdDpgAgent as _A\n"
    "    return _A(*args, **kwargs)\n",
    src,
    flags=re.M
)

if patched == src:
    print("⚠️ 패치할 라인을 못 찾음. 파일 위치/내용을 확인하세요:", init)
else:
    with open(init + '.bak', 'w', encoding='utf-8') as f:
        f.write(src)
    with open(init, 'w', encoding='utf-8') as f:
        f.write(patched)
    print("✅ 패치 완료:", init)
PY

# import가 통과되는지 확인
python -c "import mpcrl; print('mpcrl import OK')"

# 바로 실행
cd ~/checkjin/mpcrl-greenhouse

cat > ipopt.opt <<'EOF'
print_level 0
linear_solver mumps
hessian_approximation limited-memory
tol 1e-6
EOF

python -u q_learning_greenhouse.py | tee run.log




게다가 llvmlite의 Python 3.11 지원 자체는 0.40부터 있지만(기능적으로는 가능), 라즈베리파이 32-bit용 사전 빌드 휠이 없기 때문에 현실적으로 실패
cd ~/checkjin
rm -rf .venv311
python3.11 -m venv .venv311
source .venv311/bin/activate
pip install -U pip setuptools wheel

sudo apt update
sudo apt install -y cmake build-essential pkg-config \
  libjpeg-dev zlib1g-dev libtiff5-dev libfreetype6-dev \
  liblcms2-dev libwebp-dev libopenjp2-7-dev libpng-dev libxcb1-dev

pip install --only-binary=:all: "pillow>=10,<12"

# 4-1 기본셋
pip install "numpy==1.26.4" "scipy==1.13.1" "matplotlib==3.9.0" "gymnasium==0.29.1"

# 4-2 casadi (휠 있음)
pip install "casadi==3.6.5"

# 4-3 csnlp, mpcrl 설치 시 numba가 따라오면 --no-deps로 설치
pip install "csnlp==1.5.11rc4" || pip install --no-deps "csnlp==1.5.11rc4"
pip install "mpcrl==1.2.1rc4"  || pip install --no-deps "mpcrl==1.2.1rc4"
